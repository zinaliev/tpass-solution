package com.genesys.tpass.dropwizard.resources

import com.genesys.tpass.common.TPassService
import com.genesys.tpass.common.models.ApiResponse
import javax.ws.rs.GET
import javax.ws.rs.Path
import javax.ws.rs.Produces
import javax.ws.rs.QueryParam
import javax.ws.rs.core.MediaType

/**
 *
 * @author rzinalie
 */
@Path("/password")
@Produces(MediaType.APPLICATION_JSON)
class PasswordResource {

    private val service = TPassService.instance

    /**
     * Generate password
     * @param userName user name (unique)
     * @param timeout timeout in seconds after which generated password expires
     * @return password to be used for verification
     */
    @GET
    @Path("/create")
    fun create(@QueryParam("user") userName: String, @QueryParam("timeout") timeout: Int): ApiResponse<Any> {
        return service.createPassword(userName, timeout)
    }

    /**
     * Verify user's password
     * @param userName user name (unique)
     * @param password password generated by /password/create method
     * @return whether verification:
     * has passed successfully - given password matches to specified user and isn't expired,
     * has failed - given password either doesn't match to specified user or has been expired
     */
    @GET
    @Path("/verify")
    fun verify(@QueryParam("user") userName: String, @QueryParam("pass") password: String): ApiResponse<Any> {
        return service.verifyPassword(userName, password)
    }
}